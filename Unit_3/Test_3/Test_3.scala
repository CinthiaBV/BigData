
// Import a simple Spark session.
// Import Vector Assembler and Vector
import org.apache.spark.sql.SparkSession
import org.apache.spark.ml.feature.{VectorAssembler, StringIndexer}
import org.apache.spark.ml.linalg.Vectors
import org.apache.log4j._

// Use the lines of code to minimize errors

Logger.getLogger("org").setLevel(Level.ERROR)

// Create an instance of the Spark session
val spark = SparkSession.builder().getOrCreate()

// Import the Kmeans library for the clustering algorithm.
import org.apache.spark.ml.clustering.KMeans

// We load the Wholesale Customers Data dataset
val data  = spark.read.option("header","true").option("inferSchema", "true").format("csv").load("Wholesale customers data.csv")

// The dataFrame is printed
data.printSchema()

// Select the following columns: Fres, Milk, Grocery, Frozen, Detergents_Paper, Delicassen
// The dataframe is cleaned up the empty fields
val f_data= (data.select($"Fresh", $"Milk",$"Grocery", $"Frozen", $"Detergents_Paper", $"Delicassen"))

// and call this set feature_data
val f_data_clean = f_data.na.drop()


// Create a new Vector Assembler object for the feature columns
// as an input set, remembering there are no labels
val f_Data = (new VectorAssembler().setInputCols(Array("Fresh","Milk", "Grocery","Frozen", "Detergents_Paper","Delicassen")).setOutputCol("features"))

// Use the assembler object to transform feature_data
val features = f_Data.transform(f_data_clean)

// The Kmeans model is executed with k = 3
val kmeans = new KMeans().setK(3).setSeed(1L).setPredictionCol("cluster")
val model = kmeans.fit(features)


// We evaluate the groups using Within Set Sum of Squared Errors WSSSE and
val WSSE = model.computeCost(features)
println(s"Within set sum of Squared Errors = $WSSE")

// We print the clusters
println("Cluster Centers: ")
model.clusterCenters.foreach(println)


// Empty fields are cleaned from the dataframe using the na.drop function, something specific is deleted in our csv file
f_data_clean igual que f_data.na.drop() podemos ejecutar esta funcion
val f_data_clean = f_data.na.drop()


// Create a new Vector Assembler object this is used to combine a given list of columns into a single vector column. It is useful to combine raw features and features generated by different feature transformers in a single feature vector, in order to train Machine Learning models in this case we will use feature columns using the same data from Fresh, Milk, Grocery, frozen, detergents paper

Delicassen //como un conjunto de entrada, recordando que no hay etiquetas
val f_Data = (new VectorAssembler().setInputCols(Array("Fresh","Milk", "Grocery","Frozen", "Detergents_Paper","Delicassen")).setOutputCol("features"))

// We use here creating another variable the assembler object to transform feature_data_clean
val features = f_Data.transform(feature_data_clean)

// The Kmeans model is executed, which is one of the most used grouping algorithms that groups data points into a predefined number of groups. with k = 3 k is the number of desired groups. Note that fewer than k groups might be returned, for example, if there are less than k distinct points to group.

val kmeans = new KMeans().setK(3).setSeed(1L).setPredictionCol("cluster")
val model = kmeans.fit(features)

// We evaluate the groups using Within Set Sum of Squared Errors WSSSE the objective is to minimize the sum of squares of the distance between the points of each set: the Euclidean distance squared. This is the goal of WCSS
val WSSE = model.computeCost(features)
println(s"Within set sum of Squared Errors = $WSSE")

// We print the clusters
println("Cluster Centers: ")
model.clusterCenters.foreach(println)